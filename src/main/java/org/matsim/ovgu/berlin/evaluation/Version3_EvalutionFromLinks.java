package org.matsim.ovgu.berlin.evaluation;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.matsim.ovgu.berlin.input.InputTour;

public class Version3_EvalutionFromLinks {

	List<EvaluationTour> tours = new ArrayList<EvaluationTour>();

	// 200 linkIDs expected
	public void run(String[] linkIDs) {
//		linkIDs = getMySample();
//		generateRandomTours(linkIDs, 20);
		setupMyTour();
		for (int i = 0; i < tours.size(); i++) {
			tours.get(i).setup24hTravelTimes();
			tours.get(i).setupInputVersionsWithBuffers();
			tours.get(i).runEvaluations();
			tours.get(i).readEvents();
		}
		System.out.println("Version3_EvalutionFromLinks.run()");
	}

	private void setupMyTour() {
		tours.add(new EvaluationTour(InputTour.tour, "1"));
	}

	private void generateRandomTours(String[] linkIDs, int linksPerTour) {

		// shuffle linkIDs
		shuffleLinkIDs(linkIDs);

		// a tour consist of linksPerTour links
		String[] ids = new String[linksPerTour];
		int counter = 0;
		for (int i = 0; i < linkIDs.length; i++) {
			ids[counter++] = linkIDs[i];
			// a tour consist of linksPerTour links
			if (counter == linksPerTour) {
				tours.add(new EvaluationTour(ids, "" + ((i + 1) / counter)));
				counter = 0;
			}
		}
	}

	private String[] shuffleLinkIDs(String[] linkIDs) {
		// Implementing Fisherâ€“Yates shuffle
		Random rnd = new Random(99999);
		for (int i = linkIDs.length - 1; i > 0; i--) {
			int index = rnd.nextInt(i + 1);
			// Simple swap
			String id = linkIDs[index];
			linkIDs[index] = linkIDs[i];
			linkIDs[i] = id;
		}
		return linkIDs;

	}

	private String[] getMySample() {
		String[] mySample = new String[] { "77469", "56104", "72634", "70906", "11938", "152000", "37016", "60631",
				"126410", "113115", "129732", "29348", "pt_20614", "10405", "29323", "pt_18540", "152682", "122557",
				"126500", "129537", "133478", "pt_14527", "52150", "112045", "106783", "132907", "122219", "pt_17610",
				"98801", "14291", "20042", "35296", "11653", "125000", "110096", "128009", "46756", "66661", "87303",
				"34389", "131523", "pt_20166", "15447", "33541", "58423", "119371", "122271", "152447", "78002",
				"61239", "87107", "63103", "113966", "100839", "34660", "pt_19168", "12307", "108860", "54316",
				"154719", "90438", "48007", "141412", "100234", "106086", "12997", "10230", "136377", "22710", "88036",
				"110651", "pt_17595", "6485", "50978", "79014", "37621", "140792", "154259", "79242", "54069", "28233",
				"62726", "pt_20637", "39179", "69450", "19359", "114793", "89015", "41111", "46609", "11341", "127677",
				"50114", "6464", "11802", "158899", "16266", "33492", "41268", "123006", "87635", "125280", "pt_16503",
				"pt_12650", "138176", "47120", "72910", "pt_19444", "40827", "143278", "126119", "pt_19538", "pt_20722",
				"49133", "pt_98", "78869", "86129", "16943", "139858", "138178", "124864", "62370", "108149", "41390",
				"91890", "111682", "127692", "23422", "129243", "pt_17634", "139223", "149796", "130592", "29491",
				"5709", "97909", "130768", "158396", "84649", "16892", "154261", "51170", "pt_15873", "pt_16764",
				"pt_16429", "125301", "pt_18460", "45610", "56178", "506", "119508", "78084", "112129", "94460",
				"96764", "132422", "21101", "7116", "103615", "150786", "128037", "130464", "50536", "137436", "159695",
				"62516", "pt_18225", "11519", "17620", "pt_16349", "pt_9830", "pt_15844", "22946", "17159", "138001",
				"pt_19879", "121957", "pt_19139", "106946", "94408", "38323", "127715", "99837", "88638", "104198",
				"1244", "142326", "150601", "160108", "77866", "109937", "78431", "150372", "82938", "147544", "159418",
				"61216", "92999", "46779", "93020" };

		String[] just4fun = new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14",
				"15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31",
				"32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48",
				"49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65",
				"66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82",
				"83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99",
				"100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "10", "11", "12", "13", "14",
				"15", "16", "117", "118", "119", "120", "121", "122", "123", "124", "125", "126", "127", "128", "129",
				"130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144",
				"145", "146", "147", "148", "149", "150", "151", "152", "153", "154", "155", "156", "157", "158", "159",
				"160", "161", "162", "163", "164", "165", "166", "167", "168", "169", "170", "171", "172", "173", "174",
				"175", "176", "177", "178", "179", "180", "181", "182", "183", "184", "185", "186", "187", "188", "189",
				"190", "191", "192", "193", "194", "195", "196", "197", "198", "199", "200" };

		return mySample;
	}

}
